Description of each m-file in the simulator.

Eric Westervelt
4/30/01

(* == file is generated by another m-file in this simulator)

Directories:
-----------
doc/ ----------------------- where all documentation is kept
mat_files/ ----------------- where all the .mat files are kept
plots/ --------------------- where all the plots are kept
closed_loop_opt/ ----------- where closed loop optimization files are
                             kept


Animation routine:
-----------------
anim.m --------------------- animation routine
limb_position.m ------------ calculate limb positions for anim.m
even_sample.m -------------- evenly sample the data vectors
* hip_vel.m ---------------- calculate the hip velocities


Controller design:
-----------------
symb_control.m ------------- symbolic file to generate control
* decouple_abs_red.m ------- decoupling matrix and other matrices
                             needed to calculate the control
bezier_obj.m --------------- objective function for doing Bezier fits
bezier_opt.m --------------- main routine for doing Bezier fits
start_of_step_ctrl_sens.m -- approximate initial control magnitude
                             gradients with respect to control
                             parameters
zd_ctrl_sens_plots_cc.m ---- the zero dynamics' vector field's
                             differential sensitivities to the control
                             parameters


Zero dynamics:
-------------
gen_zd.m ------------------- main zero dynamics generation routine
gen_zd_diff.m -------------- generates differential sensitivities of
                             zero dynamics to control parameters
gen_zd_cc.m ---------------- generates the change of coordinates to
                             take the zero dynamics from (theta, gamma)
                             coordinates to (theta, theta_dot)
                             coordinates
gen_zd_diff_cc.m ----------- generates differential sensitivities of
                             zero dynamics to control parameters in
                             (theta, theta_dot) coordinates
* zd.m --------------------- the zero dynamics of the biped robot in
                             (theta, gamma) coordinates
* zd_cc.m ------------------ the zero dynamics of the biped robot in
                             (theta,theta_dot) coordinates
* zd_diff.m ---------------- the zero dynamics' vector field's
                             differential sensitivities to the control
                             parameters in (theta,gamma) coordinates
* zd_diff_cc.m ------------- the zero dynamics' vector field's
                             differential sensitivities to the control
                             parameters in (theta,theta_dot) coordinates
sim_zd.m ------------------- odefile to simulate the zero dynamics in
                             (theta,gamma) coordinates
sim_zd_cc.m ---------------- odefile to simulate the zero dynamics in
                             (theta,theta_dot) coordinates
* zd_lift.m ---------------- lift from the zero dynamics states (in
                             (theta,theta_dot) coordinates) to the
                             full, 10-dimensional state
* zd_special.m ------------- lift from the zero dynamics states (in
                             (theta,gamma) coordinates) to the full,
                             10-dimensional state for 
* zd_project.m ------------- project from the full, 10-dimensional
                             state to the zero dynamics in
                             (theta,gamma) coordinates
* zd_project_cc.m ---------- project from the full, 10-dimensional
                             state to the zero dynamics in
                             (theta,theta_dot) coordinates
plot_ctrl_param_sens.m ----- plot sensitivity of zero dynamics' vector 
                             field to one control parameter in (theta,
                             gamma) coordinates
plot_ctrl_param_sens_cc.m -- plot sensitivity of zero dynamics' vector 
                             field to one control parameter in (theta,
                             theta_dot) coordinates


Full dynamics:
-------------
symb_model.m --------------- symbolic file to generate full, 7 dof,
                             model
symb_model_red.m ----------- symbolic file to generate reduced, 5 dof, 
                             model
* dyn_mod_abs.m ------------ full, 7 dof, biped robot model
* dyn_mod_abs_red.m -------- reduced, 5 dof, biped robot model
main.m --------------------- routine for calling odefile (walk.m) for
                             simulating full dynamic model
walk.m --------------------- odefile to simulate the full model
bb.m ----------------------- Bhat-Bernstein controller
make_plots.m --------------- makes plots of full dynamic simulation
initialize.m --------------- model simulation initialization
* sigma.m ------------------ calculate the state of the robot as a
                             function of theta_dot at impact
* sigma_vel.m -------------- compute velocities at end of step as a
                             function of dtheta1
* step_length.m ------------ calculate step length
* swing_foot_height.m ------ calculate swing foot height
* swing_foot_velocity.m ---- calculate swing foot velocity
* hip_pos.m ---------------- calculate the hip positions
* head_height.m ------------ vertical position of robot "head" (i.e.,
                             top of torso link)
* center_of_mass.m --------- calculate center of mass of robot
impact_abs_red.m ----------- impact mapping
modelParameters.m ---------- robot model parameters (mass, link
                             length, etc.)
controlParameters.m -------- controller parameters
rm_gaps.m ------------------ remove integrator backstepping from data
                             vectors


Poincare map generation:
-----------------------
poincare_main.m ------------ generate Poincare return map for full
                             dynamics

poincare_zd_main.m --------- generate Poincare return map for reduced
                             dynamics using the zero dynamics in
                             (theta,gamma) coordinates
poincare_zd_main_cc.m ------ generate Poincare return map for reduced
                             dynamics using the zero dynamics in
                             (theta,theta_dot) coordinates
poincare_zd_compare.m ------ compare the Poincare return map for the
                             full dynamics and the Poincare return map
                             for the reduced dynamics using the zero
                             dynamics in (theta,gamma) coordinates
poincare_zd_compare_cc.m --- compare the Poincare return map for the
                             full dynamics and the Poincare return map
                             for the reduced dynamics using the zero
                             dynamics in (theta,theta_dot) coordinates
vectfield.m ---------------- draw a two-dimensional vector field
quiver_erw.m --------------- my modified version of MATLAB's quiver
                             command


Zero dynamics closed-loop optimization & transition controller:
--------------------------------------------------------------
compute_p1_p5.m ------------ compute transition controller's second
                             and second to last parameters (when using 
                             sixth order Bezier functions)
compute_transition_ctrl.m -- compute transition controller from one
                             controller to another
control_synth.m ------------ calculate control signal associated with
                             state
plot_foot_traj.m ----------- plot swing foot trajectory with box
                             constraint
sim_zd_opt.m --------------- zero dynamics simulation routine for
                             optimization
theta_obj.m ---------------- objective function used with fzero for
                             calculating theta


Zero dynamics closed-loop optimization & transition controller (in
closed_loop/):
------------------------------------------------------------------
controlParameters.m -------- special control parameter file for
                             optimization -- allows setting of control 
                             parameters by fmincon
trans_opt.m ---------------- main optimization function for computing
                             transition controller (THIS IS NOT
                             ACTUALLY NEEDED...using compute_p1_p5.m
                             and averaging parameters works dandily)
trans_opt_const.m ---------- constraint function for computing
                             transition controller (THIS IS NOT
                             ACTUALLY NEEDED...using compute_p1_p5.m
                             and averaging parameters works dandily)
trans_opt_obj.m ------------ objective function for computing
                             transition controller  (THIS IS NOT
                             ACTUALLY NEEDED...using compute_p1_p5.m
                             and averaging parameters works dandily)
zd_opt.m ------------------- main optimization function for
                             closed-loop optimization for zero
                             dynamics
zd_opt_const.m ------------- constraint function for closed-loop
                             optimization
zd_opt_obj.m --------------- objective function for closed-loop
                             optimization


Misc:
----
fixlength.m ---------------- used in making m-files so strings don't
                             extend over a specified length
* total_energy_red.m ------- calculate the total energy of the biped
                             robot
miperhr2mpersec.m ---------- convert from miles per hour to meters per 
                             second
mpersec2miperhr.m ---------- convert from meters per second to miles
                             per hour

Not used, but interesting :
-------------------------
main_zd.m ------------------ routine for calling zd_model.mdl for
                             simulating zero dynamic model
zd_model.mdl --------------- Simulink model of zero-dynamics